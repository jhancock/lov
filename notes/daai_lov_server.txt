# daai.lov.is  165.227.5.233

# create new ssh keys for this server
ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/jhancock_lov_20190606 -C "jhancock@shellshadow.com"
# new keys for gitlab
ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/jhancock_gitlab_20190609 -C "jhancock@shellshadow.com"
# copy public key to MacOS clupboard
pbcopy < ~/.ssh/jhancock_gitlab_20190609.pub

# as root
# set timezone to 'Etc/UTC'
# dpkg-reconfigure tzdata
# should have tried to newer method and checked first
# https://help.ubuntu.com/lts/serverguide/NTP.html.en
timedatectl status

# check hostname
hostname
# set hostname, if needed - already set
# sudo vim /etc/hostname
# hostname -F /etc/hostname

# update system
sudo apt update
sudo apt upgrade
sudo apt autoremove

# install editor.   already installed
#sudo apt install vim-tiny

# add user jhancock
sudo adduser jhancock
sudo adduser jhancock sudo
sudo adduser lov
sudo adduser lov sudo

# byobu - already installed
byobu-config  # choose to enable byobu at login
# F-9 -> Change Escape Sequence, set to Ctr-S so Ctr-A works for beginning of line

# install digitalocean montioring agent
# https://www.digitalocean.com/docs/monitoring/how-to/install-agent/
# https://www.digitalocean.com/docs/monitoring/how-to/upgrade-legacy-agent/
curl -sSL https://insights.nyc3.cdn.digitaloceanspaces.com/install.sh | sudo bash

# setup ssh keys for users jhancock and lov
[server] mkdir ~/.ssh && chmod 700 ~/.ssh
[client] scp ~/.ssh/jhancock_lov_20190606.pub jhancock@daai:~/.ssh
[server] cat ~/.ssh/jhancock_lov_20190606.pub > ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

# config sshd
sudo vim /etc/ssh/sshd_config
# edit:
Port 22 -> Port 2666
PermitRootLogin yes -> PermitRootLogin no
PasswordAuthentication yes -> PasswordAuthentication no

# change client ~/.ssh/config to ref hostname, port and keys.
# restart sshd
sudo service ssh restart

# enable access to gitlab from user lov
vim ~/.ssh/config
# add:
Host gitlab.com
  Compression yes
  HostName gitlab.com
  IdentityFile ~/.ssh/jhancock_2016_12_1

#TODO change gitlab key above to new one
# copy the keys to server
[client] scp ~/.ssh/jhancock_2016_12_1* lov@daai:~/.ssh
[client] scp ~/.ssh/jhancock_gitlab_20190609* lov@daai:~/.ssh

# copy mac's .gitconfig and .gitignore_global to lov@daai
[client] scp ~/.gitconfig lov@daai:~/.
# edit line: excludesfile = /Users/jhancock/.gitignore_global
[client] scp ~/.gitignore_global lov@daai:~/.

#######################################
##  Install erlang, elixir and node  ##
#######################################

# https://elixir-lang.org/install.html#unix-and-unix-like
wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb && sudo dpkg -i erlang-solutions_1.0_all.deb
sudo apt-get update
sudo apt install -y build-essential
sudo apt-get install esl-erlang
sudo apt-mark hold esl-erlang
# Remove the hold to upgrade:
# sudo apt-mark unhold esl-erlang
sudo apt-get install elixir

# enable erlang vm to bind to ports below 1024 (e.g. 80 and 443)
# this needs to be done everytime the erlang package upgrades.
# install directory may change, e.g.: .../erts-10.4.2
sudo setcap 'cap_net_bind_service=+ep' /usr/lib/erlang/erts-10.4.2/bin/beam.smp

# install imagemagick
sudo apt install imagemagick

# install node.js
# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions-enterprise-linux-fedora-and-snap-packages
$ the above link tells us to install for ubuntu from https://github.com/nodesource/distributions/blob/master/README.md#debinstall

curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
sudo apt-get install -y nodejs

# install inotify for live reload of file changes for phoenix dev mode 
# https://github.com/rvoicilas/inotify-tools/wiki
sudo apt-get install inotify-tools

# webpack or whatever hits default inotify limit of 8192
# https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

# https://hexdocs.pm/phoenix/installation.html
mix local.hex
mix archive.install hex phx_new 1.4.6

# clone lov repo
git clone git@gitlab.com:jonhancock/lov.git

# copy dev.secret.exs prod.secret.exs and shared.secret.exs
scp ~/lov/config/*.secret.exs lov@daai:~/lov/config/.

# setup postgres first ;)
cd ~/lov
mix deps.get
mix ecto.setup
cd assets && npm install
# npm install shows some vulnerability warnings.
# run `npm audit fix` to fix them, or `npm audit` for details
# skipping this for now as I shouldn't need to worry on this dev server and can look into the implications on phoenix and webpack later

# setup app and erlang for hhtps (without nginx)
# https://github.com/elixir-plug/plug/blob/master/guides/https.md
# https://hexdocs.pm/plug/Plug.SSL.html#configure/1

# stop and disable nginx if its installed
# sudo service nginx stop
# sudo systemctl disable nginx

# create custom set of Diffie-Hellman parameters
openssl dhparam -out dhparams.pem 4096

# uncomment ssl options from phoenix config files: dev.exs and prod.exs

# https://elixirforum.com/t/proper-way-to-enforce-https-only/2117/5
# https://spin.atomicobject.com/2018/03/07/force-ssl-phoenix-framework/

# SSL test  
https://www.ssllabs.com/ssltest/analyze.html?d=lov.is

# remote iex.  attach to another erlang node
# https://broot.ca/erlang-remsh-is-dangerous
# https://stackoverflow.com/questions/38491614/attach-an-iex-session-to-running-elixir-otp-process
# http://joeellis.la/iex-remsh-shells/

##########################
##  Install postgresql  ##
##########################

sudo apt-get install ca-certificates
curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

sudo apt-get update
sudo apt-get install postgresql-11

# start postgres
# pg_ctlcluster 11 main start

# stop postgres
# sudo systemctl stop postgresql@11-main
# sudo systemctl restart postgresql@11-main

# ensure postgres doesn't auto-upgrade
sudo apt-mark hold postgresql-11
# Remove the hold:
# sudo apt-mark unhold postgresql-11

# connect to psql
# sudo su - postgres
# psql
# set password to postgres
# \password 

# enable connecting to psql form other user accounts
# https://gist.github.com/AtulKsol/4470d377b448e56468baef85af7fd614
# edit /etc/postgresql/11/main/pg_hba.conf
# change first line:
# Database administrative login by Unix domain socket
# local   	all             postgres     peer
# to:
# local  	all      		postgres     md5

# now try to connect with psql from user lov
# lov> psql -U postgres


##############################
##  SSL generate csr notes  ##
##############################

namecheap csr and ssl tools
https://decoder.link/csr_generator

openssl req -new -newkey rsa:2048 -nodes -keyout lov_is.key -out lov_is.csr
>>>>>>
jhancock@bigmac:~$ openssl req -new -newkey rsa:2048 -nodes -keyout lov_is.key -out lov_is.csr
Generating a 2048 bit RSA private key
.+++
............................+++
writing new private key to 'lov_is.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) []:US
State or Province Name (full name) []:
Locality Name (eg, city) []:
Organization Name (eg, company) []:Lov LLC
Organizational Unit Name (eg, section) []:
Common Name (eg, fully qualified host name) []:lov.is
Email Address []:jhancock@shellshadow.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:

<<<<<<<<

##########################
##  VS Code remote dev  ##
##########################

# set terminal font
# https://code.visualstudio.com/docs/editor/integrated-terminal
# https://code.visualstudio.com/docs/getstarted/settings
# in VS Code, Preferences -> Setting, search for terminal.integrated.fontSize

# https://code.visualstudio.com/docs/remote/ssh#_getting-started

##########################
##  Install nginx       ##
##########################

sudo apt update
sudo apt install nginx

# copy ssl cert and key from ~/Documents/lov_docs/ssl_20190609
# put together bundle
# https://helpdesk.ssls.com/hc/en-us/articles/203427642-How-to-install-an-SSL-certificate-on-a-NGINX-server
# see readme.txt in ~/Documents/lov_docs/ssl_20190609/lov_is
# from ~/Documents/lov_docs/ssl_20190609
scp lov_is_20190609.key lov@daai:~/certs/.
# from ~/Documents/lov_docs/ssl_20190609/lov_is
scp lov_is_20190609_full_bundle.crt lov@daai:~/certs/.

# https://www.linode.com/docs/web-servers/nginx/tls-deployment-best-practices-for-nginx/
# cp original nginc.conf
cd /etc/nginx
sudo cp nginx.conf nginx.conf.original
cd sites-available
sudo cp default default.original
# we will use the newer method of including from directory conf.d instead of sites-available and sites-enabled

# remove symlink in sites-enabled
sudo rm /etc/nginx/sites-enabled/default

sudo cp /home/lov/lov/notes/nginx/nginx.conf /etc/nginx/.
sudo cp /home/lov/lov/notes/nginx/lov_is.conf /etc/nginx/conf.d/.

# reload configs
# sudo nginx -s reload
sudo service nginx restart
# sudo service nginx stop
# systemctl list-units --all --type=service --no-pager
# sudo systemctl disable nginx

# run test  
https://www.ssllabs.com/ssltest/analyze.html?d=lov.is
